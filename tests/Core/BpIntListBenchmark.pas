unit BpIntListBenchmark;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, bpIntList, SysUtils, BpIntListInterface;

type
  // Test methods for class TBpIntList

  TbpIntListBenchmark = class(TTestCase)
  strict private
    FBpIntList: TBpIntList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddPerformance;
  end;

implementation

uses
  Windows, PsAPI;

procedure TbpIntListBenchmark.SetUp;
begin
  FBpIntList := TBpIntList.Create;
end;

procedure TbpIntListBenchmark.TearDown;
begin
  FBpIntList.Free;
  FBpIntList := nil;
end;

procedure TbpIntListBenchmark.TestAddPerformance;
var
  lvIntList: TBpIntList;
  lvStrList: TStringList;
  lvStartTick, lvEndTick: DWORD;
  lvDurationIntList, lvDurationStrList, lvMemoryIntList, lvMemoryStrList: DWORD;
  lvProcessMemoryBefore, lvProcessMemoryAfter: PROCESS_MEMORY_COUNTERS;
  I: Integer;
const
  lvIntegersToAdd = 45000000; // 45 million
begin
  lvProcessMemoryBefore.cb := SizeOf(lvProcessMemoryBefore);
  lvProcessMemoryAfter.cb := SizeOf(lvProcessMemoryAfter);

  // Test TBpIntList
  lvIntList := TBpIntList.Create;
  try
    GetProcessMemoryInfo(GetCurrentProcess(), @lvProcessMemoryBefore, SizeOf(lvProcessMemoryBefore));
    lvStartTick := GetTickCount;
    for I := 1 to lvIntegersToAdd do
      lvIntList.Add(I);
    lvEndTick := GetTickCount;
    GetProcessMemoryInfo(GetCurrentProcess(), @lvProcessMemoryAfter, SizeOf(lvProcessMemoryAfter));
    lvDurationIntList := lvEndTick - lvStartTick;
    lvMemoryIntList := (lvProcessMemoryAfter.WorkingSetSize - lvProcessMemoryBefore.WorkingSetSize) div 1024;
  finally
    lvIntList.Free;
  end;

  // Reset memory measurement
  FillChar(lvProcessMemoryBefore, SizeOf(lvProcessMemoryBefore), 0);
  FillChar(lvProcessMemoryAfter, SizeOf(lvProcessMemoryAfter), 0);
  lvProcessMemoryBefore.cb := SizeOf(lvProcessMemoryBefore);
  lvProcessMemoryAfter.cb := SizeOf(lvProcessMemoryAfter);

  // Test TStringList
  lvStrList := TStringList.Create;
  try
    GetProcessMemoryInfo(GetCurrentProcess(), @lvProcessMemoryBefore, SizeOf(lvProcessMemoryBefore));
    lvStartTick := GetTickCount;
    for I := 1 to lvIntegersToAdd do
      lvStrList.Add(IntToStr(I));
    lvEndTick := GetTickCount;
    GetProcessMemoryInfo(GetCurrentProcess(), @lvProcessMemoryAfter, SizeOf(lvProcessMemoryAfter));
    lvDurationStrList := lvEndTick - lvStartTick;
    lvMemoryStrList := (lvProcessMemoryAfter.WorkingSetSize - lvProcessMemoryBefore.WorkingSetSize) div 1024;
  finally
    lvStrList.Free;
  end;

  Status(Format('TBpIntList Duration: %d ms', [lvDurationIntList]));
  Status(Format('TStringList Duration: %d ms', [lvDurationStrList]));
  Status(Format('TBpIntList Memory Usage: %d KB', [lvMemoryIntList]));
  Status(Format('TStringList Memory Usage: %d KB', [lvMemoryStrList]));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TbpIntListBenchmark.Suite);

end.

